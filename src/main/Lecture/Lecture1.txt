웹 애플리케이션 이해
    웹 서버, 웹 애플리케이션 서버
        웹은 HTTP 기반이다.

        웹서버
            HTTP 기반으로 동작
            정적 리소스 제공 (html, css, js, image, 영상 등등)
            EX) NGINX, APACHE

        웹 애플리케이션 서버(WAS)
            HTTP 기반으로 동작
            웹 서버 기능을 포함하고 있다 (정적 리소스 제공하는)
            ★차이점 프로그램 코드를 실행해서 애플리케이션 로직 수행
            동적 HTML, HTTP API(JSON 등등), 서블릿, JSP 스프링 MVC
            EX) TOMCAT, JETTY

        웹서버, 웹 애플리케이션 서버 차이
            정적리소스만 제공하냐, 애플리케이션 로직까지 실행가능 하냐
            사실 웹 서버도 프로그램을 실행하는 기능 포함
            웹 애플리케이션 서버도 웹 서버의 기능을 제공

            자바에서는 서블릿 컨테이너 기능을 제공하면 WAS

            WAS는 애플리케이션 코드를 실행하는데 더 특화되어있다고 생각하자.

        웹 시스템 구성 - WAS, DB
            WAS, DB만으로 시스템 구성 가능
            WAS는 정적리소스, 애플리케이션 로직 모두 제공가능

            그런데 이렇게 정적리소스, 애플리케이션 로직 모두 담당하면 너무 많은 역할을 담당하여 서버 과부하(비용 문제) 발생
            가장 비싼 애플리케이션 로직이 정적 리소스 때문에 수행이 어려울 수 있다.

            WAS 장애시 오류 화면도 노출 불가능하다. 생각보다 더 잘죽는다.
            WAS는 애플리케이션 로직을 실행하는데 더 특화되어있다고 생각하자.

            그래서 보통은 아래처럼 한다.

        웹 시스템 구성 - WEB, WAS, DB
            정적 리소스는 웹서버가 처리

            웹 서버는 애플리케이션 로직같은 동적인 처리가 필요하면 WAS에 요청을 위임

            WAS는 중요한 애플리케이션 로직 처리 전담한다.

            시스템 리소스를 효율적으로 사용 가능하다.
                정적 리소스가 많이 사용되면 WEB서버 증설
                애플리케이션 리소스가 많이 사용되면 WAS 증설

            이렇게 역할을 분리하면 정적 리소스만 제공하는 웹서버는 잘죽지않는다. 그냥 기존의 파일 보내주기만 하면 되기때문
            그런데 애플리케이션 로직이 동작하는 WAS 서버는 잘 죽는다. 그럴때는 오류 화면을 WEB서버가 제공 가능하다.

    서블릿
        HTML From 데이터 전송
        요청을 기반으로 웹 브라우저가 요청 HTTP 메시지를 만든다.

        이러한 과정들을 내가 직접한다면?
        서버 TCP/IP 연결 대기, 소켓 연결
        HTTP 요청 메시지를 파싱해서 읽기
        POST 방식, /save URL 인지
        Content-Type 확인
        HTTP 메시지 바디 내용 파싱
        username, age 데이터를 사용할 수 있게 파싱
        저장프로세스 실행
        비즈니스 로직 실행 (의미 있는 비즈니스 로직)
        데이터 베이스에 저장 요청
        HTTP 응답 메시지 생성 시작
        HTTP 시작 라인 생성
        HEADER 생성
        메시지 바디에 HTML 생성에서 입력
        TCP/IP에 응답 전달, 소켓 종료

        의미있는 비즈니스 로직 외에는 어떤 전송이든간에 계속적으로 진행되어야 하는것들이다.

        서블릿에서는 이러한 작업들을 자동으로 처리해준다.

        URL이 호출되면 서블릿 코드(SERVICE메서드의 내용에 비즈니스 로직을 작성하면 된다.)가 실행된다.
        HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest
        HTTP 응답 정보를 편리하게 제공할 수 있는 HttpServletResponse

        요청이 오면은 요청메시지를 기반으로 request, response객체를 만든 다음에 객체들을 파라미터로 하는 서블릿을 만들어서 실행한다.
        이 서블릿이 실행을 끝내면 response 객체를 바탕으로 HTTP 응답 메시지를 생성한다.

        개발자는 Request객체에서 HTTP 요청 정보를 편리하게 꺼내서 사용하고 Response객체에 HTTP 응답 정보를 편리하게 입력한다.

        서블릿 컨테이너란 무엇인가???
        WAS안에 서블릿 컨테이너가 존재, 이 컨테이너는 서블릿 객체를 생성하고 호출하고 생명주기까지 관리를 해준다.
        톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 한다.

        서블릿 객체는 싱글톤으로 관리한다.
        고객의 요청이 올때마다 계속 객체를 생성하는것은 비효율적 그래서 최초에 로딩시점(생성)에 서블릿 객체를 미리 만들어두고 재활용(모두가 공유해서 사용)
        모든 고객 요청은 동일한 서블릿 객체 인스턴스에 접근 공유 변수 사용에 주의를 기울여야 한다. 서블릿 컨테이너 종료시 함께 종료

        request객체는 항상 새로 생성하는것이 맞다! 왜냐하면 나의 id와 다른사람의 id가 다르듯이 같아서는 안된다.

        JSP도 서블릿으로 변환 되어서 사용
        ★동시 요청을 위한 멀티 쓰레드 처리지원 -> 동시에 만명이 요청을 해도 잘 처리하는 이유가 멀티 쓰레드를 지원해주기 떄문! 개발자가 신경안써도 WAS가 알아서 해준다.

    동시요청 - 멀티 쓰레드
        백엔드 개발자에게 굉장히 중요한 개념입니다!
        트래픽과 관련해서

        서블릿 객체를 누가 호출하는건가???
        쓰레드라는 것이 호출해준다!
        애플리케이션 코드를 하나하나 순차적으로 실행하는 것이 쓰레드이다. 프로세스는 프로그램 실행, 쓰레드는 그 프로그램 안에서 실행
        쓰레드가 없다면 자바 애플리케이션 실행 자체가 불가능하다.
        동시 처리가 필요하면 쓰레드를 추가로 생성해 주어야 한다.

        단일 요청의 경우 - 쓰레드 하나 사용
            사용요청이 오면 쓰레드가 기다리고 있다가 할당을 받아서 서블릿을 실행시켜준다.그 서블릿이 실행을 끝내면 휴식

        다중 요청 - 쓰레드 하나 사용
            현재 쓰레드가 서블릿을 처리하는중에 추가적인 요청이 오면 그 쓰레드가 연결을 해야해서 기다리다가 타임아웃나면 에러등이 발생한다.

            이런 경우 해결방안은?
            요청마다 쓰레드를 생성한다.

            요청마다 쓰레드 생성의 장점
                동시 요청 처리가능, 리소스가 허용할 때 까지 처리가능, 하나의 쓰레드가 지연되어도, 나머지 쓰레드는 정상 동작한다.
            단점
                쓰레드의 생성비용은 비싸다 그래서 요청이 올때마다 생성하면 응답 속도가 늦어진다.
                쓰레드 생성에 제한이 없다 그래서 요청이 너무 많이 오면 cpu, 메모리 임계점을 넘어서 서버가 죽을 수 있다.
                컨텍스트 스위칭 비용이 발생한다. 코어가 하나인 경우 쓰레드가 두개면은 코어 하나가 쓰레드 두개를 동시에 실행 할 수 없다. 그래서 실행하면서 전환할때 비용이 발생

        그래서 was에서는 내부에 쓰레드 풀을 두고있다.
        요청이 오면 쓰레드 풀에 요청을 해서 미리 만들어진 쓰레드를 갖다 쓴다. 사용이 다 끝나면 없애는것이 아니라 쓰레드 풀에 반납한다.
        즉 쓰레드를 죽이고 생성하고 이러지 않는다. 이러면 쓰레드 풀에 있는 쓰레드보다 더 많은 요청이 오면 대기하거나 거절한다.

        쓰레드 풀 정리
            요청 마다 쓰레드 생성의 단점 보완
            필요한 쓰레드를 쓰레드 풀에 보관하고 관리한다, 쓰레드 풀에 생성 가능한 쓰레드의 최대치를 관리한다. 변경 가능
            쓰레드가 필요하면, 이미 생성되어 있는 쓰레드를 쓰레드 풀에서 꺼내서 사용, 사용이 끝나면 쓰레드 풀에 쓰레드를 반납
            생성하고 종료하는 비용(cpu)이 절약되고, 응답 시간이 빠르다. 생성가능한 최대치가 있으므로 기존 요청은 안전하게 처리할 수 있다.

        쓰레드 풀 실무 팁 - 성능 튜닝
            was의 주요 튜닝 포인트는 최대 쓰레드 수이다. 여기서 극적인 효과를 본다.
            너무 낮게 설정하면? 동시 요청이 많으면 서버 리소스는 여유롭지만 클라이언트는 금방 지연되거나 거절당한다.
            너무 높게 설정하면? 동시 요청이 많으면 cpu,메모리 리소스 임계점 초과로 서버 다운
            장애 발생시? 클라우드면 일단 서버부터 늘리고, 이후에 튜닝 클라우드가 아니면 그냥 열심히 튜닝

            그러면 적정 숫자는 어떻게 잡는가? 애플리케이션 로직의 복잡도, cpu, 메모리, io리소스 상황에 따라 모두 다르다.
            성능테스트가능하다.

        was의 멀티 쓰레드 지원의 핵심!
            ★멀티 쓰레드에 대한 부분은 was가 처리, 즉 개발자가 신경안써도 된다는것이 핵심! 설정정보정도만 신경써주면 된다.
            개발자가 멀티 쓰레드 관련 코드를 신겨읐지 않아도 된다.
            멀티 쓰레드 환경이므로 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용

    HTML, HTTP API, CSR, SSR
        정적 리소스를 제공할 때는 고정된 HTML파일, CSS 등등을 제공을 한다!
        즉, 이미 생성된 리소스 파일을 제공

        동적인 HTML 페이지는 동적으로 JSP,타임리프 같은 것을 가지고 동적으로 생성한 뒤에 웹브라우저에 내려준다.
        그러면 웹 브라우저는 받은 자료를 해석을 해서 우리에게 보여주는것!

        HTTP API는 HTML이 아니라 데이터를 전달하는것!! 주문정보를 조회했다 치면 주문번호, 금액등의 정보를 내려주는것! 주로 JSON을 통해서
        다양한 시스템에서 사용한다 주로 3가지 상황에서!
        1. 앱 클라이언트 등에서 데이터를 내려주는것(주로 JSON방식으로)
        2. 웹 클라이언트 자바스크립트를 이용해서 요청
        3. 주문서버와 결제서버 등에서 데이터를 주고받을때

        이런 경우들을 HTTP API를 전달한다고 한다. HTML을 제외한 서로 보여주는 그런 전송을 제외한 모든곳에서 실제 데이터를 주고 받고 실제 프로세스를 호출할때 다 사용된다.

        UI클라이언트 접점
            1. 앱 클라이언트
            2. 웹 브라우저에서 자바스크립트를 통한 HTTP API호출
            위의 것이 발달한것이 React, Vue등의 웹 클라이언트
        서버 to 서버
            3. 서버간의 통신
            기업간 데이터 통신

        ★그래서 백엔드 개발자는 3가지의 고민사항을 항상 고려해야한다!
            정적리소스 어떻게 제공?
            동적으로 제공되는 html 페이지 어떻게 할거야?
            http api어떻게 제공할거야?

        SSR - 서버 사이드 렌더링
            서버에서 최종 HTML을 생성해서 클라이언트에 전달
            동적으로 생성된 최종결과물리 서버에서 다 생성이 된다고 해서 서버 사이드 렌더링이라고 부른다.
            주로 정적인 화면에 사용
            JSP, 타임리프 -> 백

        CSR - 클라이언트 사이드 렌더링
            HTML결과를 자바스크립트를 사용해 웹 브라우저에서 동적으로 생성해서 적용
            주로 동적인 화면에 사용, 웹 환경을 마치 앱처럼 필요한 부분부분 변경할 수 있음
            구글지도, 구글 캘린더 등이 이렇게 구현
            리액트 뷰 -> 프론트

            요청이 오면 텅 빈 HTML을 보내주고 대신에 자바스크립트 링크를 내려준다. 웹 브라우저에서는 자바스크립트 요청을하고 응답을 하는데
            이 응답에는 클라이언트 로직과 HTML 렌더링 코드들이 담겨져있다. 그러면 다시 웹 브라우저가 HTTP API 데이터 요청을 서버에게 하고
            JSON등으로 데이터를 받은뒤 자바스크립트로 HTML 결과 렌더링하여 웹브라우저로 만드는것!

        그러면 우리는 어디까지 알아야할까???
        백엔드 개발자 입장에서 UI기술
            백엔드 - 서버 사이드 렌더링 기술
            JSP, 타임리프
            화면이 정적이고, 복잡하지 않을 때 사용
            백엔드 개발자는 서버 사이드 렌더링 기술 학습 필수
            굉장히 단순해서 하루보면 다 알 수 있다.
            프론트엔드 기술학습은 옵션

    자바 백엔드 웹 기술 역사
        서블릿 - 1997
            TCP/IP 연결부터해서 각종 소켓등등을 대신해준다!
            하지만 자바코드를 짜야하기 떄문에 HTML 생성이 어려움(동적으로)

        JSP - 1999
            최종적으로는 서블릿으로 변한다.
            HTML 생성은 편리하지만, 비즈니스 로직까지 너무 많은 역할 담당 코드가 너무 길어지고 유지보수가 매우 어려움

        MVC패턴(서블릿, JSP 조합)
            모델, 뷰, 컨트롤러로 역할을 나누어 개발

        이런 패턴으로 개발하기 때문에 개발이 다 비슷하다. 그래서 사람들이 프레임워크를 만들기 시작
        다양한 프레임워크들이 있었지만 애너테이션기반의 스프링 MVC 등장하고 모두 사라지고 스프링으로 통일

        기능이 너무많은 껍데기 스프링 부트 등장 신규는 다 부트쓴다.

        최신기술
        스프링 웹 플럭스
            최소 쓰레드로 최대성능 - 쓰레드 컨텍스트 스위칭 비용 효율화
            비동기 넌 블러킹 처리
            서블릿 기술 사용X
            함수형 스타일로 개발 - 동시처리 코드 효율화
            단점은?
            기술적 난이도 높다
            RDB 지원 부족
            MVC의 쓰레드 모델도 충분히 빠르다.
            실무 사용 X

        자바 뷰 템플릿 - HTML을 편리하게 생성하는 뷰 기능
            JSP - 속도 느림, 기능 부족
            타임리프 - 최선의 선택

