서블릿
    프로젝트 생성
        환경설정 및 프로젝트 생성

    Hello 서블릿
        스프링 부트 환경에서 서블릿 등록하고 사용해보기

        원래 서블릿은 톰캣같은 웹 애플리케이션 서버를 직접 설치하고, 그 위에 서블릿 코드를 클래스 파일로 빌드해서 올린 다음, 톰캣
        서버를 실행하면 된다.
        스프링 부트는 톰캣 서버를 내장하고 있으므로, 톰캣 서버 설치 없이 편리하게 서블릿 코드를 실행할 수 있다.

        서블릿에서 제공하는 쿼리파라미터를 읽는 기능! request.getParameter("읽으려는것의 key")

        response에 write()를 사용해서 웹브라우저에 응답이 가능하다.

        http요청 정보를 다 보고싶을때는 로거기능을 지원하니까 사용하면된다.
        application.properties에 logging.level.org.apache.coyote.http11=debug 사용
        개발할때만 사용! 운영서버에 로그를 다 남기면 성능 저하가 발생 할 수 있다.

        서블릿 컨테이너 동작 방식 설명
            request, response객체를 만들어서 서블릿에게 넘겨준다. 실행시키면서 매개변수로 넘겨주는것!
            작업을 진행하고 http응답을 만들어서 브라우저로 보내준다.

    HttpServletRequest 개요
        http요청 메시지를 직접 파싱해서 사용해도 되지만 매우 불편하다. 파싱이란 뭔가???
        프로젝트 있을때마다 파싱하면 힘들어
        서블릿은 개발자 대신에 htrt요청 메시지를 파싱해주는것! 그 결과를 HttpServletRequest객체에 담아서 제공
        헤더와 바디 START LINE등을 읽을 수 있도록 지원해준다.

        임시 저장소 기능 해당 HTTP요청이 시작부터 끝날 때 까지 유지되는 임시 저장소 기능 가장 자주사용!

        세션 관리 기능

        이 객체들이 HTTP요청 메시지, HTTP응답 메시지를 편리하게 사용하도록 도와주는 객체라는점이 제일 중요

    HttpServletRequest - 기본 사용법
        get은 contentType이 없다 즉, null이 나옴 비교위해서 postman사용해보기

    HTTP 요청 데이터 - 개요
        HTTP 요청 메시지를 통해 클라이언트에서 ㅅ버ㅓ로 데이터를 전달하는 방법을 알아보자!

        총 3가지 방법
        1. GET - 쿼리 파라미터
            메시지 바디 없이 url의 쿼리 파라미터에 데이터를 포함해서 전달
            예) 검색, 필터, 페이징 등에서 많이 사용하는 방식

        2. POST- HTML Form
            메시지 바디에 쿼리 파라미터 형식으로 전달
            예) 회원 가입, 상품 주문, HTML Form 사용

        3. HTTP message body
            HTTP API에서 주로 사용
            예) JSON, XML, TEXT 등
            POST, PUT, PATCH

    HTTP 요청 데이터 - GET 쿼리 파라미터
        간단한 데이터 전달 메시지 바디없이 쿼리파라미터를 이용해서
        복수 파라미터에서 단일 파라미터 조회
        복수 파라미터는 사실 잘 안쓴다.
        파라미터이름이 중복일때는 getParameterValues()사용

    HTTP 요청 데이터 - POST HTML Form
        HTML의 Form을 사용해서 클라이언트에서 서버로 데이터를 전송해보자.
        우리가 전송버튼을 누르면 웹 브라우저가 요청 HTTP 메시지를 만들어서 서버에 전달한다.
        POST도 쿼리파라미터이기 때문에 getParameter로 get,post둘다 조회 가능하다.
        쿼리파라미터 조회 메서드를 그대로 사용하면 된다!

        간단한 테스트할때 폼만들필요없이 postman사용하면 된다.

        get이든 post이든 form형식으로 보내든 쿼리파라미터 형식으로 보내면 다 동일하게 자료를 다룰 수 있다.

    HTTP 요청 데이터 - API 메시지 바디 - 단순 텍스트
        HTTP message body에 데이터를 직접 담아서 요청하는것!
        주로 JSON으로 통일
        PUT, PATCH, POST

        InputStream으로 데이터를 읽을 수 있다.
        하지만 보통 이렇게 문자(단순 TEXT)로 주고 받지는 않는다!

    HTTP 요청 데이터 - API 메시지 바디 - JSON
        HTTP API에서 주로 사용하는 JSON형식으로 데이터 전달
        JSON도 결국 문자이다.

    HttpServletResponse - 기본 사용법
        1. HTTP 응답 메시지 생성하는 역할! 우리 대신에 생성해준다

        2. 편의 기능 제공
            Content-Type, 쿠키, Redirect

    HTTP 응답 데이터 - 단순 텍스트, HTML
        요청과 비슷하게 크게 3가지로 나뉜다.
        1. 단순 텍스트 응답
        2. HTML 응답
        3. HTTP API - MessageBody JSON 응답

        웹브라우저가 제대로 렌더링을 하면 자바코드를 html로 바꿔서 띄워준다.

    HTTP 응답 데이터 - API JSON
        HTTP API를 만들때 주로 사용하는 API JSON 사용연습

    정리
        HTTP 요청 메시지의 스펙을 편리하게 조회하고 사용할 수 있는것이 HttpServletRequest 이다. + 각종 편리한 기능 제공 startline + header + body 등등
        클라이언트에서 서버로 핵심(데이터)를 보낼때는 크게 3가지 방법을 사용한다. GET, POST, HTTP message body
        사실 get, post는 서버에서 읽을때 양식이 똑같이 읽는다.

        form데이터를 전송할때는 post만! put, patch는 안된다.



