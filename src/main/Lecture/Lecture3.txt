서블릿, JSP, MVC 패턴
    회원 관리 웹 애플리케이션 요구사항
        간단하게 만들기 코어 모듈, 핵심 비즈니스 로직을 만들고
        처음엔 서블릿으로 만들고 그다음에 JSP로 제작 그다음에 MVC패턴으로 제작, 불편한점 보완해가면서

    서블릿으로 회원 관리 웹 애플리케이션 만들기
        서블릿 파라미터 받아오고 비즈니스 로직실행하는것은 괜찮다.
        하지만 html만드는것은 굉장히 별로야!
        그래서 탬플릿 엔진이라는것을 주로 사용
        html에다가 자바코드를 넣는것이 탬플릿엔진, 서블릿에서는 자바코드에 html을 넣어서 굉장히 불편
        템플릿엔진에는 jsp, 타임리프등이 있다.

        status가 회색이면 그것은 cache된것

    JSP로 회원 관리 웹 애플리케이션 만들기
        HTML을 출력하는것이 중점적인게 서블릿과 다르다.
        JSP에 비즈니스 로직과 뷰 영역이 섞여 있다. JSP가 너무 많은 역할을 한다.

    MVC 패턴 - 개요
        서블릿,JSP로만 개발을 하면 비즈니스 로직과 뷰렌더링까지 한곳에서 처리 해야한다면 너무 많은 역할로 인해 유지보수가 어려워진다.

        ★변경의 주기가 다르면 분리해야한다. UI와 비즈니스 로직의 변경은 따로따로 일어난다. 이렇게 변경의 라피으 사이클이 다르면 유지보수에 좋지않다.

        모델 덕분에 뷰는 비즈니스 로직이나 데이터 접근은 몰라도 되고 화면 렌더링에만 집중할 수 있다.

    MVC 패턴 - 적용
        WEB-INF아래 있는 파일들은 외부에서 호출해도 호출되지 않는다. - 항상 컨트롤러(서블릿)을 거쳐서 호출된다.
        webapp안에있는것들은 그냥 url만으로 호출가능

        특정 jsp를 계속 사용할것이면 상대경로를 사용한 부분을 그대로 유지해야 다른 컨트롤러에서도 사용이 가능하다.

        바로 뷰로가지않고 항상 컨트롤러를 거치고간다! 컨트롤러에서는 서비스, 리포지토리에 접근해서 데이터를 가져온다 이 데이터는 Model에 담고
        뷰는 Model을 사용해서 데이터를 출력한다. 이 값을 꺼낼때는 jsp에서 제공하는 기능을 사용 ( jstl 등등 )

        반복되는 것들이 많아서 더 개선할 여지가 많다 -> MVC 패턴의 한계점들을 알아보자

    MVC 패턴 - 한계
        MVC 컨트롤러의 단점
        1. 포워드 중복 메서드로 뽑아서 유틸클래스로 만들어도 유틸클래스를 호출해줘도 그 호출 또한 중복
        2. viewPath도 중복 접두사로 /WEB-INF/views, 접미사로 .jsp 등
        3. 사용하지 않는 코드 HttpServletRequest request, HttpServletResponse response 는 사용하지 않을 때도 많다.
        4. ★공통 처리가 어렵다! 이 문제를 해결하기 위해서는 컨트롤러 호출 전에 먼저 공통 기능을 처리해야한다. 그것이 바로 프론트 컨트롤러!

        스프링 MVC의 핵심이 바로 프론트 컨트롤러에 있다.

        필터랑은 조금 다르다. 필터는 정해진 스펙대로 체인을 넘기는것이고, 이건 정해놓은대로 넘겨줄 수가 있다.
        정확히 어떤점이 다를까???

    정리
        서블릿 제작 후기 -> html코드를 작성하는게 쉽지않음
        그래서 jsp -> 자바코드를 쓰는부분 html쓰는부분 섞여있어 분리할래
        그래서 mvc 패턴 -> 뷰 로직 깔끔 그래도 중복로직이 많고 공통 처리가 어려워

        이걸 해결하기 위해서 대표 컨트롤러( 프론트 컨트롤러 ) 를 만들어서 사용해보자


