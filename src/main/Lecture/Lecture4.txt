MVC 프레임워크 만들기
    프론트 컨트롤러 패턴 소개
        프론트 컨트롤러 도입 전에는 클라이언트가 호출을 하면 컨트롤러마다 공통로직을 다 만들어 주어야 했다 입구가 없기때문에!
        프론트 컨트롤러(서블릿)을 도입해서 모든 요청을 받아서 공통관심사를 모아서 처리하여 문지기를 둔다고 생각하면 된다.

        프론트 컨트롤러가 직접 호출해줄 거니까 다른 컨트롤러는 서블릿으로 만들 필요가 없다( 서블릿 상속 등등 )
        DipatchServlet가 프론트 컨트롤러 패턴으로 구현되어 있다.

    프론트 컨트롤러 도입 - v1
        요청이 오면 매핑정보를 뒤져서 매핑되는것을 찾아서 호출

        controllerv1을 만들었는데 로직은 기존의 Servlet과 완전히 동일하다. 대신 서블릿을 상속받지 않고 웹서블릿 애노테이션이 없다.

        다형성 기가막히네!

        인터페이스가 중요하다!각 컨트롤러는 이 인터페이스를 구현 프론트 컨트롤러는 이 인터페이스를 호출

        코드 개선은 레벨을 나눠서 해야한다! 구조(큰레벨), 디테일(작은레벨)을 나눠서 개선해야한다.

        실제개발할떄는 상대경로보다는 절대경로를 더많이 사용한다.

    View 분리 - v2
        뷰로 이동하는 부분에 중복을 없애보자.

        이제 Controller에서 바로 jsp로 보내지 않고 MyView를 만들어서 여기서 포워드하도록! 만들것

         각각의 컨트롤러는 MyView 객체를 만들어서 반환하게 설계하여 코드 중복을 줄였다.

         다음 단계에서는 모델을 추가, 스펙상 받아야하는 사용하지 않는 request, response를 제거

    Model 추가 - v3
        model을 통해서 종속성제거와 뷰의 중복을 제거 할것!
        요청 파라미터 정보는 자바의 Map으로 대신 전달
        변경의 지점을 하나로 만들 수 있다! 뷰 파일 경로가 바뀌어도 하나의 지점에서만 딱 변경할수 있게하면 좋은설계

        모델과 뷰가 섞여있는 모델뷰를 반환, 논리이름을 뷰 리졸버에서 절대이름으로 바꿔주게끔 설계
        이렇게하면 경로가 나중에 바뀌어도 컨트롤러에서 바꿀 필요가 없다!

        jsp는 request.getAttribute()로 데이터를 조회하기 때문에 모델의 데이터를 꺼내서 setAttribute()해준다.

        이렇게 해도 부족한 점들이 있다.
        개발자들이 조금 더 실용적으로 개발할 수 있게! 무엇을 바꿔야 더 실용적으로 바뀌어???

    단순하고 실용적인 컨트롤러 - v4
        v3와 달리 model을 넘겨주고 ViewName으로 반환받는것이 바뀌었다.


